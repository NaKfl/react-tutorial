{"version":3,"sources":["components/Square/index.js","components/Board/index.js","components/Game/index.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","isHighlighted","className","classnames","Board","squares","winnerLine","renderSquare","i","includes","key","content","length","row","j","push","renderBoard","calculateWinner","lines","a","b","c","winner","line","Game","status","useState","Array","fill","location","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","isDecs","setIsDecs","current","moves","map","item","index","step","col","Math","trunc","convertToLocation","desc","isDraw","filter","Boolean","newHistory","slice","handleClick","reverse","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89582058.chunk.js","sourcesContent":["import classnames from 'classnames';\nimport React from 'react';\n\nexport default function Square({ value, onClick, isHighlighted }) {\n  return (\n    <button\n      className={classnames('square', { 'square-highlight': isHighlighted })}\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n}\n","import React from 'react';\nimport Square from './../Square';\n\nexport default function Board({ squares, onClick, winnerLine }) {\n  const renderSquare = (i) => (\n    <Square\n      isHighlighted={winnerLine.includes(i)}\n      key={i}\n      value={squares[i]}\n      onClick={() => onClick(i)}\n    />\n  );\n\n  const renderBoard = (squares) => {\n    const content = [];\n    for (let i = 0; i < squares.length; i += 3) {\n      const row = [];\n      for (let j = i; j < i + 3; j++) {\n        row.push(renderSquare(j));\n      }\n      content.push(\n        <div key={i} className='board-row'>\n          {row}\n        </div>\n      );\n    }\n    return content;\n  };\n\n  return <div>{renderBoard(squares)}</div>;\n}\n","import classnames from 'classnames';\nimport React, { useState } from 'react';\nimport Board from './../Board';\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], line: lines[i] };\n    }\n  }\n  return { winner: null, line: [] };\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([\n    {\n      squares: Array(9).fill(null),\n      location: null,\n    },\n  ]);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [isDecs, setIsDecs] = useState(false);\n\n  const handleClick = (i) => {\n    const newHistory = history.slice(0, stepNumber + 1);\n    const current = newHistory[newHistory.length - 1];\n    const squares = current.squares.slice();\n    const { winner } = calculateWinner(squares);\n    if (winner || squares[i]) {\n      return;\n    }\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory([...newHistory, { squares, step: i }]);\n    setStepNumber(newHistory.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const handleReset = () => {\n    setHistory([\n      {\n        squares: Array(9).fill(null),\n        location: null,\n      },\n    ]);\n    setXIsNext(true);\n    setStepNumber(0);\n    setIsDecs(false);\n  };\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const convertToLocation = (step) => {\n    const col = (step % 3) + 1;\n    const row = Math.trunc(step / 3) + 1;\n    return [row, col];\n  };\n\n  const changeSort = () => {\n    setIsDecs(!isDecs);\n  };\n\n  const current = history[stepNumber];\n  const { winner, line } = calculateWinner(current.squares);\n\n  const moves = history.map((item, index) => {\n    const [row, col] = convertToLocation(item.step);\n    const desc = index\n      ? `Go to move #${index} [${row},${col}]`\n      : 'Go to game start';\n    return (\n      <li key={index}>\n        <button\n          className={classnames({ 'selected-move': stepNumber === index })}\n          onClick={() => jumpTo(index)}\n        >\n          {desc}\n        </button>\n      </li>\n    );\n  });\n\n  let status;\n  const isDraw =\n    current.squares.filter(Boolean).length === current.squares.length;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else if (isDraw) {\n    status = 'Draw';\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <div className='game'>\n      <div className='game-board'>\n        <Board\n          squares={current.squares}\n          onClick={(i) => handleClick(i)}\n          winnerLine={line}\n        />\n      </div>\n      <div className='game-info'>\n        <div>{status}</div>\n        <button onClick={handleReset}>Reset</button>\n        <button onClick={changeSort}>{`Change to ${\n          !isDecs ? 'descending ' : 'ascending '\n        } order`}</button>\n        <ol>{isDecs ? moves.reverse() : moves}</ol>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}